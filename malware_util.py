import hashlib
import requests
import virustotal


API_KEY = '861e6c05cf123c79818a9255a239734d86c83ec12016cd4f9c38ead2048f979e'
BLOCK_SIZE = 65536
CHUNK_SIZE = 1024
CONTENT_LENGTH_HEADER = 'content-length'

ERROR_CONNECTION = -600
ERROR_DB = -1
ERROR_MISSING_HEADER = -601
ERROR_VIRUSTOTAL_REPORT = -3000
ERROR_VIRUSTOTAL_SCAN = -2000

LOWEST_HTTP_ERROR_CODE = 400
MALWARE_NEGATIVE = 1
MALWARE_POSITIVE = 2
MALWARE_PENDING = 3


def url_to_name(url):
    return url.split('/')[-1].split('#')[0].split('?')[0].lower()


def download_file(task):
    try:
        resp = requests.get(task['url'], stream=True)
        if resp.status_code >= LOWEST_HTTP_ERROR_CODE:
            task['error'] = -1 * resp.status_code
            return task
        with open(task['name'], 'wb') as f:
            for chunk in resp.iter_content(chunk_size=CHUNK_SIZE):
                if chunk:
                    f.write(chunk)
    except requests.exceptions.ConnectionError:
        task['error'] = ERROR_CONNECTION
        return task

    return task


def get_size(task):
    try:
        resp = requests.head(task['url'])
        if resp.status_code >= LOWEST_HTTP_ERROR_CODE:
            task['error'] = -1 * resp.status_code
            return task
    except requests.exceptions.ConnectionError:
        task['error'] = ERROR_CONNECTION
        return task

    if CONTENT_LENGTH_HEADER in resp.headers:
        task['size'] = long(resp.headers[CONTENT_LENGTH_HEADER])
    else:
        task['error'] = ERROR_MISSING_HEADER

    return task


def md5(filename):
    hasher = hashlib.md5()
    with open(filename, 'rb') as f:
        buf = f.read(BLOCK_SIZE)
        while len(buf) > 0:
            hasher.update(buf)
            buf = f.read(BLOCK_SIZE)
    return hasher.hexdigest()


def retrieve_report(task):
    try:
        v = virustotal.VirusTotal(API_KEY)
        report = v.get(task['scan_id'])

        if report.done:
            if report.positives == 0:
                task['ismalware'] = MALWARE_NEGATIVE
            else:
                task['ismalware'] = MALWARE_POSITIVE
        else:
            task['ismalware'] = MALWARE_PENDING
    except:
        task['error'] = ERROR_VIRUSTOTAL_REPORT

    return task


def upload_to_scan(task):
    try:
        v = virustotal.VirusTotal(API_KEY)
        report = v.scan(task['name'])

        task['scan_id'] = report.scan_id
        if report.done:
            if report.positives == 0:
                task['ismalware'] = MALWARE_NEGATIVE
            else:
                task['ismalware'] = MALWARE_POSITIVE
        else:
            task['ismalware'] = MALWARE_PENDING
    except:
        task['error'] = ERROR_VIRUSTOTAL_SCAN

    return task
