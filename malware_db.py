import sqlalchemy as sa
import sqlalchemy.ext.declarative as sad
import sqlalchemy.orm as sao
import sqlalchemy_utils as sau
import malware_util


MYSQL_USER_ID = 'admin'
MYSQL_PASSWORD = 'admin123'
MYSQL_HOST = 'localhost'
MYSQL_DB = 'malware'
MYSQL_TABLE = 'apk'


Base = sad.declarative_base()


class Apk(Base):
    """ Declarative defintion of the Apk Table

     id: index
     url: used to track the URL input
     name: APK file name
     size: size of APK file, aka metadata
     md5: MD5 hash of the APK file
     ismalware: used to track inspection result or status
        1: Not Malicious
        2: Malicious
        3: pending
     scanid: track the scan_id to retrieve virustotal's report
    """

    __tablename__ = MYSQL_TABLE
    id = sa.Column(sa.Integer, primary_key=True)
    url = sa.Column(sa.String(1024))
    name = sa.Column(sa.String(512))
    size = sa.Column(sa.BigInteger)
    md5 = sa.Column(sa.CHAR(32))
    ismalware = sa.Column(sa.SmallInteger, default=0)
    scanid = sa.Column(sa.String(128))


class MalwareDatabase(object):
    def __init__(self):
        self._mysql = ("mysql://" + MYSQL_USER_ID +
                       ":" + MYSQL_PASSWORD +
                       "@" + MYSQL_HOST +
                       "/" + MYSQL_DB)

    def initialize(self, task):
        try:
            self._engine = sa.create_engine(self._mysql)
            self._DBSession = sao.sessionmaker(bind=self._engine)

            # create database if not exist
            if not sau.database_exists(self._engine.url):
                sau.create_database(self._engine.url)

            # create table if not exist
            self._metadata = sa.MetaData(self._engine)
            if not self._engine.dialect.has_table(self._engine, MYSQL_TABLE):
                Base.metadata.create_all(self._engine)
        except:
            task['error'] = malware_util.ERROR_DB

        return task

    def check_url(self, task):
        session = self._DBSession()
        try:
            res = session.query(Apk).filter(Apk.url == task['url'])
        except:
            task['error'] = malware_util.ERROR_DB
            return task
        finally:
            session.close()

        if res.count() > 0:
            task['matching_id'] = res.first().id
            task['ismalware'] = res.first().ismalware
            task['scan_id'] = res.first().scanid

        return task

    def check_metadata(self, task):
        task = malware_util.get_size(task)
        if 'error' in task:
            return task
        task['name'] = malware_util.url_to_name(task['url'])

        session = self._DBSession()
        try:
            res = (session.
                   query(Apk).
                   filter(Apk.name == task['name']).
                   filter(Apk.size == task['size']))
        except:
            task['error'] = malware_util.ERROR_DB
            return task
        finally:
            session.close()

        if res.count() > 0:
            task['matching_id'] = res.first().id
            task['ismalware'] = res.first().ismalware
            task['scan_id'] = res.first().scanid

        return task

    def check_md5(self, task):
        task = malware_util.download_file(task)
        if 'error' in task:
            return task

        task['md5'] = malware_util.md5(task['name'])

        session = self._DBSession()
        try:
            res = (session.query(Apk).filter(Apk.md5 == task['md5']))
        except:
            session.rollback()
            task['error'] = malware_util.ERROR_DB
            return task
        finally:
            session.close()

        if res.count() > 0:
            task['matching_id'] = res.first().id
            task['ismalware'] = res.first().ismalware
            task['scan_id'] = res.first().scanid

        return task

    def check_and_update(self, task):
        task = malware_util.retrieve_report(task)
        if ('error' in task or
                task['ismalware'] == malware_util.MALWARE_PENDING):
            return task

        session = self._DBSession()
        try:
            session.query(Apk).filter(Apk.id == task['matching_id']).update(
                {Apk.ismalware: task['ismalware']}
            )
            session.commit()
        except:
            session.rollback()
            task['error'] = malware_util.ERROR_DB
        finally:
            session.close()

        return task

    def check_virustotal(self, task):
        task = malware_util.upload_to_scan(task)
        if 'error' in task:
            return task

        session = self._DBSession()
        try:
            session.add(
                Apk(url=task['url'],
                    name=task['name'],
                    size=task['size'],
                    md5=task['md5'],
                    ismalware=task['ismalware'],
                    scanid=task['scan_id']
                    )
            )
            session.commit()
        except:
            session.rollback()
            task['error'] = malware_util.ERROR_DB
        finally:
            session.close()

        return task
