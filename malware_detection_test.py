#!/usr/bin/env python

import mock
import unittest

from malware_db import MalwareDatabase as Database
from malware_detection import MalwareDetection as Detection
import malware_util as util


URL = 'http://foo.com/bar'
NAME = 'bar'
SIZE = 41848934
MD5 = 'fcfc4e8bff5300b739cbcc561cb4a899'


class MalwareDetectionTestCase(unittest.TestCase):
    def setUp(self):
        self.detection = Detection()

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_url(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = dict(url=URL,
                                           ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        assert not mock_check_metadata.called
        assert not mock_check_md5.called
        assert not mock_check_virustotal.called
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_url_pending(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = dict(url=URL,
                                           ismalware=util.MALWARE_PENDING)
        mock_check_and_update.return_value = dict(ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        assert not mock_check_metadata.called
        assert not mock_check_md5.called
        assert not mock_check_virustotal.called
        mock_check_and_update.assert_called_once_with(mock_check_url.return_value)

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_metadata(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL,
                                                name=NAME,
                                                size=SIZE,
                                                ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        assert not mock_check_md5.called
        assert not mock_check_virustotal.called
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_metadata_pending(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL,
                                                name=NAME,
                                                size=SIZE,
                                                ismalware=util.MALWARE_PENDING)
        mock_check_and_update.return_value = dict(ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        assert not mock_check_md5.called
        assert not mock_check_virustotal.called
        mock_check_and_update.assert_called_once_with(mock_check_metadata.return_value)

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_md5(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(url=URL,
                                           name=NAME,
                                           size=SIZE,
                                           md5=MD5,
                                           ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        assert not mock_check_virustotal.called
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_md5_pending(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(url=URL,
                                           name=NAME,
                                           size=SIZE,
                                           md5=MD5,
                                           ismalware=util.MALWARE_PENDING)
        mock_check_and_update.return_value = dict(ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        assert not mock_check_virustotal.called
        mock_check_and_update.assert_called_once_with(mock_check_md5.return_value)

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_virustotal(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(url=URL, name=NAME, size=SIZE, md5=MD5)
        mock_check_virustotal.return_value = dict(url=URL,
                                                  name=NAME,
                                                  size=SIZE,
                                                  md5=MD5,
                                                  ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        mock_check_virustotal.assert_called_once_with(mock_check_md5.return_value)
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_virustotal_pending(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(url=URL, name=NAME, size=SIZE, md5=MD5)
        mock_check_virustotal.return_value = dict(url=URL,
                                                  name=NAME,
                                                  size=SIZE,
                                                  md5=MD5,
                                                  ismalware=util.MALWARE_PENDING)
        mock_check_and_update.return_value = dict(ismalware=util.MALWARE_NEGATIVE)

        assert self.detection.isMalware(URL) == util.MALWARE_NEGATIVE
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        mock_check_virustotal.assert_called_once_with(mock_check_md5.return_value)
        mock_check_and_update.assert_called_once_with(mock_check_virustotal.return_value)

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_database_initialization_error(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):

        task = dict(url=URL)
        mock_initialize.return_value = dict(error=util.ERROR_DB)

        assert self.detection.isMalware(URL) == util.ERROR_DB
        mock_initialize.assert_called_once_with(task)
        assert not mock_check_url.called
        assert not mock_check_metadata.called
        assert not mock_check_md5.called
        assert not mock_check_and_update.called
        assert not mock_check_virustotal.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_url_error(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = dict(error=util.ERROR_CONNECTION)

        assert self.detection.isMalware(URL) == util.ERROR_CONNECTION
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        assert not mock_check_metadata.called
        assert not mock_check_md5.called
        assert not mock_check_virustotal.called
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_metadata_error(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(error=util.ERROR_DB)

        assert self.detection.isMalware(URL) == util.ERROR_DB
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        assert not mock_check_md5.called
        assert not mock_check_virustotal.called
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_md5_error(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(error=util.ERROR_CONNECTION)

        assert self.detection.isMalware(URL) == util.ERROR_CONNECTION
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        assert not mock_check_virustotal.called
        assert not mock_check_and_update.called

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_update_error(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(url=URL, name=NAME, size=SIZE, md5=MD5)
        mock_check_virustotal.return_value = dict(url=URL,
                                                  name=NAME,
                                                  size=SIZE,
                                                  md5=MD5,
                                                  ismalware=util.MALWARE_PENDING)
        mock_check_and_update.return_value = dict(error=util.ERROR_VIRUSTOTAL_REPORT)

        assert self.detection.isMalware(URL) == util.ERROR_VIRUSTOTAL_REPORT
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        mock_check_virustotal.assert_called_once_with(mock_check_md5.return_value)
        mock_check_and_update.assert_called_once_with(mock_check_virustotal.return_value)

    @mock.patch.object(Database, 'check_virustotal')
    @mock.patch.object(Database, 'check_and_update')
    @mock.patch.object(Database, 'check_md5')
    @mock.patch.object(Database, 'check_metadata')
    @mock.patch.object(Database, 'check_url')
    @mock.patch.object(Database, 'initialize')
    def test_detection_with_virustotal_error(
            self,
            mock_initialize,
            mock_check_url,
            mock_check_metadata,
            mock_check_md5,
            mock_check_and_update,
            mock_check_virustotal
    ):
        task = dict(url=URL)
        mock_initialize.return_value = task
        mock_check_url.return_value = task
        mock_check_metadata.return_value = dict(url=URL, name=NAME, size=SIZE)
        mock_check_md5.return_value = dict(url=URL, name=NAME, size=SIZE, md5=MD5)
        mock_check_virustotal.return_value = dict(error=util.ERROR_VIRUSTOTAL_SCAN)

        assert self.detection.isMalware(URL) == util.ERROR_VIRUSTOTAL_SCAN
        mock_initialize.assert_called_once_with(task)
        mock_check_url.assert_called_once_with(mock_initialize.return_value)
        mock_check_metadata.assert_called_once_with(mock_check_url.return_value)
        mock_check_md5.assert_called_once_with(mock_check_metadata.return_value)
        mock_check_virustotal.assert_called_once_with(mock_check_md5.return_value)
        assert not mock_check_and_update.called


if __name__ == "__main__":
    unittest.main()
